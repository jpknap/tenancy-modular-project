name: Deploy Laravel Project

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SSH_HOST: ${{ vars.SSH_HOST }}
  SSH_USER: ${{ vars.SSH_USER }}
  SSH_PORT: ${{ vars.SSH_PORT }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
  ENV_CONTENT: ${{ vars.ENV_CONTENT }}
  DB_CONNECTION: sqlite
  DB_DATABASE: database/database.sqlite

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # -----------------------
      # 1. Obtener el código
      # -----------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # -----------------------
      # 2. Configurar PHP
      # -----------------------
      - name: Setup PHP (enable coverage with PCOV)
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, ctype, json, tokenizer, bcmath, pdo_sqlite
          tools: composer
          coverage: pcov
          ini-values: |
            pcov.directory=${{ github.workspace }}

      # -----------------------
      # 3. Preparar base de datos
      # -----------------------
      - name: Create database directory and file
        run: |
          mkdir -p database
          touch database/database.sqlite
          chmod 777 database/database.sqlite

      # -----------------------
      # 4. Configurar .env para testing
      # -----------------------
      - name: Prepare .env (testing)
        run: |
          cp .env.example .env
          {
            echo "APP_ENV=testing"
            echo "DB_CONNECTION=sqlite"
            echo "DB_DATABASE=database/database.sqlite"
            echo "APP_DEBUG=true"
            echo "APP_KEY="
          } >> .env

      # -----------------------
      # 5. Instalar dependencias
      # -----------------------
      - name: Install PHP & Node deps
        run: |
          composer install --prefer-dist --no-progress --no-interaction
          # Si los tests no dependen del build de frontend, comenta estas 2 líneas para acelerar
          npm ci
          npm run build

      # -----------------------
      # 6. Generar APP_KEY
      # -----------------------
      - name: Generate app key
        run: php artisan key:generate

      # -----------------------
      # 7. (Opcional) Migraciones
      # -----------------------
      # Si usas RefreshDatabase no hace falta; si no, descomenta esto:
      # - name: Run migrations for tests
      #   run: php artisan migrate --force

      # -----------------------
      # 8. Chequeos de calidad
      # -----------------------
      - name: Run ECS (Easy Coding Standard)
        run: composer check-style

      - name: Run PHPStan
        run: composer test-phpstan

      # -----------------------
      # 9. Ejecutar tests con cobertura
      # -----------------------
      - name: Run tests with coverage (Clover)
        run: |
          php artisan config:clear
          php artisan test

      # -----------------------
      # 10. Validar cobertura >= 80%
      # -----------------------
      - name: Check coverage >= 80%
        run: |
          php -r '
          $x = simplexml_load_file("coverage.xml");
          if (!$x) { fwrite(STDERR, "No se pudo leer coverage.xml\n"); exit(1); }
          $m = $x->project->metrics ?? null;
          if (!$m) { fwrite(STDERR, "Formato Clover inesperado\n"); exit(1); }
          $s  = (int)$m["statements"];
          $cs = (int)$m["coveredstatements"];
          if ($s === 0) { fwrite(STDERR, "0 statements: no se puede calcular cobertura\n"); exit(1); }
          $p = ($cs * 100.0) / $s;
          echo "Coverage: " . number_format($p, 2) . "%\n";
          if ($p < 80) { fwrite(STDERR, "❌ Coverage por debajo de 80%\n"); exit(1); }
          echo "✅ Coverage OK (>= 80%)\n";
          '

  # -----------------------
  # Deploy solo en main
  # -----------------------
  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        env:
          SSH_AUTH_SOCK: ${{ env.SSH_AUTH_SOCK }}
        run: |
          echo "${{ vars.ENV_CONTENT }}" > .env
          ssh -o StrictHostKeyChecking=no -p ${{ vars.SSH_PORT }} ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} \
            'cd /var/www/your-project && \
             git pull origin main && \
             composer install --no-dev --optimize-autoloader && \
             php artisan migrate --force && \
             npm ci && \
             npm run build && \
             php artisan optimize:clear && \
             php artisan config:cache && \
             php artisan route:cache && \
             php artisan view:cache'
