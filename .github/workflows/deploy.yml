name: Deploy Laravel Project

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DB_CONNECTION: sqlite
  DB_DATABASE: database/database.sqlite

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # -----------------------
      # 1. Obtener el código
      # -----------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # -----------------------
      # 2. Configurar PHP
      # -----------------------
      - name: Setup PHP (enable coverage with PCOV)
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, ctype, json, tokenizer, bcmath, pdo_sqlite
          tools: composer
          coverage: pcov
          ini-values: |
            pcov.directory=${{ github.workspace }}

      # -----------------------
      # 3. Preparar base de datos
      # -----------------------
      - name: Create database directory and file
        run: |
          mkdir -p database
          touch database/database.sqlite
          chmod 777 database/database.sqlite

      # -----------------------
      # 4. Configurar .env para testing
      # -----------------------
      - name: Prepare .env (testing)
        run: |
          cp .env.example .env
          {
            echo "APP_ENV=testing"
            echo "DB_CONNECTION=sqlite"
            echo "DB_DATABASE=database/database.sqlite"
            echo "APP_DEBUG=true"
            echo "APP_KEY="
          } >> .env

      # -----------------------
      # 5. Instalar dependencias
      # -----------------------
      - name: Install PHP & Node deps
        run: |
          composer install --prefer-dist --no-progress --no-interaction
          # Si los tests no dependen del build de frontend, comenta estas 2 líneas para acelerar
          npm ci
          npm run build

      # -----------------------
      # 6. Generar APP_KEY
      # -----------------------
      - name: Generate app key
        run: php artisan key:generate

      # -----------------------
      # 7. (Opcional) Migraciones
      # -----------------------
      # Si usas RefreshDatabase no hace falta; si no, descomenta esto:
      # - name: Run migrations for tests
      #   run: php artisan migrate --force

      # -----------------------
      # 8. Chequeos de calidad
      # -----------------------
      - name: Run ECS (Easy Coding Standard)
        run: composer check-style

      - name: Run PHPStan
        run: composer test-phpstan

      # -----------------------
      # 9. Ejecutar tests con cobertura
      # -----------------------
      - name: Run tests with coverage (Clover)
        run: |
         php artisan config:clear
         vendor/bin/phpunit --dont-report-useless-tests --coverage-clover=coverage.xml || true

      - name: Get changed PHP files
        run: |
            git fetch origin main --depth=1
            git diff --name-only origin/main...HEAD -- '*.php' > changed_files.txt
            echo "Changed files:"
            cat changed_files.txt || true

      - name: Check diff coverage >= 80%
        run: |
              php -r '
              $files = file("changed_files.txt", FILE_IGNORE_NEW_LINES|FILE_SKIP_EMPTY_LINES);
              if (!$files || count($files) === 0) {
                  echo "No hay archivos PHP modificados, skipping coverage check.\n";
                  exit(0);
              }
              $xml = simplexml_load_file("coverage.xml");
              if (!$xml) {
                  fwrite(STDERR, "❌ No se pudo leer coverage.xml\n");
                  exit(1);
              }
              $total = $covered = 0;
              foreach ($xml->xpath("//file") as $file) {
                  $name = (string)$file["name"];
                  foreach ($files as $changed) {
                      if (str_contains($name, $changed)) {
                          $s = (int)$file->metrics["statements"];
                          $c = (int)$file->metrics["coveredstatements"];
                          $total += $s;
                          $covered += $c;
                          echo "File: $changed → $c/$s covered\n";
                      }
                  }
              }
              if ($total === 0) {
                  fwrite(STDERR, "❌ No se detectaron statements en archivos modificados\n");
                  exit(1);
              }
              $p = $covered * 100 / $total;
              echo "Coverage en archivos modificados: " . number_format($p,2) . "%\n";
              if ($p < 80) {
                  fwrite(STDERR, "❌ Coverage por debajo del 80% en archivos modificados\n");
                  exit(1);
              }
              echo "✅ Coverage OK en cambios (>= 80%)\n";
              '
  # -----------------------
  # Deploy solo en main
  # -----------------------
  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: easingthemes/ssh-deploy@v5.0.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_PORT: ${{ secrets.SSH_PORT }}
          SOURCE: "./"
          TARGET: "/var/www/jpmb_app"
          EXCLUDE: "/vendor/, /node_modules/, .git/, .github/"

      - name: Run post-deployment commands
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /var/www/jpmb_app
            echo "${{ vars.ENV_FILE }}" > .env
            composer install
            php artisan migrate --force
            php artisan optimize:clear
            php artisan optimize
            php artisan storage:link
            sudo chown -R nginx:nginx storage bootstrap/cache
            sudo chmod -R 775 storage bootstrap/cache
